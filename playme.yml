

# 1. install ansible: sudo apt install ansible
# 2. make a file named inventory.ini with the content below:

################################
# inventory.ini file content:

# [localhost]
# 127.0.0.1 ansible_connection=local
#################################


# 3. run command: ansible-playbook playme.yml -i inventory.ini --ask-become-pass
# --- it will ask you for the root password

# dry run command: ansible-playbook playme.yml -i inventory.ini --check --diff --ask-become-pass
# --- to test the playbook playme.yml without doing any modifications on the system

# feel free to contribute to this playbook
# SAYONARA :)




- name: install docker|docker-compose|kubectl|kind|helm|zip|awscli|argocdcli|kubecolor|minikube|terrafarm
  hosts: all
  become: yes
  vars:
    DOCKER_COMPOSE_VER: "v2.2.2"
    KIND_VER: "v0.18.0"
    KUBE_VER: "stable"
    DOCKER_DEP:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
      - zip
  
    USER: "docker"
  tasks:
    - name: Update apt packages
      apt:
        update_cache: "yes"
        force_apt_get: "yes"

    - name: Install packages needed for Docker and zip to unpack awscli
      apt:
        name: "{{ DOCKER_DEP }}"
        state: present
        force_apt_get: "yes"

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present

    - name: Save the current debian release version into a variable
      shell: lsb_release -cs
      register: debian_version


    - name: Add Docker Repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/debian {{ debian_version.stdout }} stable"
        state: present


    - name: Add GPG Key for Terrafarm and adding to sources.list
      shell: |
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list



    - name: Update apt packages
      apt:
        update_cache: "yes"
        force_apt_get: "yes"


    - name: Install Docker latest version
      apt:
        name: "docker-ce"
        state: present
        force_apt_get: "yes"


    - name: Create docker group
      group:
        name: "docker"
        state: present


    - name: Adding user {{ USER }} to docker group
      user:
        name: "{{ USER }}"
        groups: "docker"
        append: "yes"


    - name: Install Docker Compose specified version
      get_url:
        url: https://github.com/docker/compose/releases/download/{{ DOCKER_COMPOSE_VER }}/docker-compose-Linux-x86_64
        dest: "/usr/local/bin/docker-compose"
        mode: 0755


    - name: Install kubectl latest version
      block:
        - name: Download kubectl
          shell: curl -LO "https://dl.k8s.io/release/{{ KUBE_VER }}/bin/linux/amd64/kubectl"
        - name: Move kubectl binary to /usr/local/bin
          # command: sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          command: install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        - name: Check kubectl version
          command: kubectl version --client
      # when: "'kubectl' not in ansible_playbook_python"



    # - name: Install kubectl latest version
      # shell: |
        # curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        # install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl





    - name: Install Kind specified version
      block:
        - name: Download Kind
          get_url:
            url: "https://kind.sigs.k8s.io/dl/{{ KIND_VER }}/kind-linux-amd64"
            dest: "/usr/local/bin/kind"
            mode: 0755
      # when: "'kind' not in ansible_playbook_python"


    - name: Install HELM latest version
      block:
        - name: Download Helm installer script
          get_url:
            url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
            dest: /tmp/get_helm.sh
            mode: "u+x"    
        - name: Run Helm installer script
          command: /tmp/get_helm.sh



    - name: Install AWS CLI latest version
      block:
        - name: Download AWS CLI
          shell: curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        - name: Unzip AWS CLI
          shell: unzip awscliv2.zip
        - name: Install AWS CLI
          # command: sudo ./aws/install
          command: ./aws/install


    # - name: Create .aws folder in user's home directory
      # file:
        # path: "/home/{{ USR }}/.aws"
        # state: directory
        # owner: "{{ USR }}"
        # group: "{{ USR }}"
        # mode: "0755"
      # when: USR != 'root'
    # 
    # - name: Add AWS credentials file
      # blockinfile:
        # path: "/home/{{ USR }}/.aws/credentials"
        # block: |
          # [default]
          # aws_access_key_id = YOUR_ACCESS_KEY
          # aws_secret_access_key = YOUR_SECRET_KEY
        # marker: ""
        # create: true
        # owner: "{{ USR }}"
        # group: "{{ USR }}"
        # mode: "0600"
      # when: USR != 'root'


      
    - name: Install ArgoCD CLI latest version
      block:
        - name: Download ArgoCD CLI
          shell: curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        - name: Move ArgoCD CLI binary to /usr/local/bin
          # command: sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          command: install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        - name: Remove ArgoCD CLI binary
          file:
            path: argocd-linux-amd64
            state: absent


    - name: Install kubecolor (to colorize your kubectl output) latest version
      apt:
       name: "kubecolor"
       state: present
       force_apt_get: "yes"

    - name: Configuring the kubectl autocomplete and adding "k" alias for kubectl, colorize the output
      become: false
      shell: |
        echo "source <(kubectl completion bash)" >>~/.bashrc
        echo "alias k=kubecolor" >>~/.bashrc
        echo "complete -o default -F __start_kubectl kubecolor k" >>~/.bashrc
        . ~/.bashrc


    - name: Install minikube latest version
      shell: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        install minikube-linux-amd64 /usr/local/bin/minikube


    - name: Install Terrafarm latest version
      apt:
       name: "terraform"
       state: present
       force_apt_get: "yes"









